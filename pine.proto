syntax = "proto3";

service Pine {
  rpc SignMessage(SignMessageRequest) returns (SignMessageResponse) {}
  rpc ListUnspentWitness(ListUnspentWitnessRequest) returns (ListUnspentWitnessResponse) {}

  // LockOutpoint marks an unspent transaction output as reserved excluding
  // it from coin selection.
  rpc LockOutpoint(LockOutpointRequest) returns (LockOutpointResponse) {}

  // UnlockOutpoint unmarks an unspent transaction output as reserved making
  // it eligible for coin selection.
  rpc UnlockOutpoint(UnlockOutpointRequest) returns (UnlockOutpointResponse) {}

  // NewAddress returns the next external or internal address for the wallet.
  rpc NewAddress(NewAddressRequest) returns (NewAddressResponse) {}
}

message SignMessageRequest {
  // Message to sign.
  bytes message = 1;

  // Public key of the private key to sign with (65 bytes uncompressed).
  bytes publicKey = 2;
}

message SignMessageResponse {
  // Signature of the given message (DER-encoded).
  bytes signature = 1;
}

message ListUnspentWitnessRequest {
  int32 minConfirmations = 1;
  int32 maxConfirmations = 2;
}

message ListUnspentWitnessResponse {
  repeated Utxo utxos = 1;
}

message Utxo {
  uint32 addressType = 1;
  int64 value = 2; // In satoshis
  int64 confirmations = 3;
  bytes pkScript = 4;
  bytes transactionHash = 5; // txid
  uint32 vout = 6; // Index of the output in the transaction
}

message LockOutpointRequest {
  bytes hash = 1; // Hash of the output's transaction (txid)
  uint32 index = 2; // Index of the output in the transaction
}

message LockOutpointResponse {}

message UnlockOutpointRequest {
  bytes hash = 1; // Hash of the output's transaction (txid)
  uint32 index = 2; // Index of the output in the transaction
}

message UnlockOutpointResponse {}

message NewAddressRequest {
  uint32 addressType = 1;
  bool change = 2; // If true, an internal address is returned
}

message NewAddressResponse {
    bytes hash = 1; // A ripemd160 hash of the address
}
